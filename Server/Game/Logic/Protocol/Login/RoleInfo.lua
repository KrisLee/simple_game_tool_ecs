-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Login

local flatbuffers = require('flatbuffers')

local RoleInfo = {} -- the module
local RoleInfo_mt = {} -- the class metatable

function RoleInfo.New()
    local o = {}
    setmetatable(o, {__index = RoleInfo_mt})
    return o
end
function RoleInfo.GetRootAsRoleInfo(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = RoleInfo.New()
    o:Init(buf, n + offset)
    return o
end
function RoleInfo_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function RoleInfo_mt:RoleId()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function RoleInfo_mt:RoleName()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function RoleInfo_mt:RoleLevel()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function RoleInfo_mt:ServerId()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function RoleInfo.Start(builder) builder:StartObject(4) end
function RoleInfo.AddRoleId(builder, roleId) builder:PrependUOffsetTRelativeSlot(0, roleId, 0) end
function RoleInfo.AddRoleName(builder, roleName) builder:PrependUOffsetTRelativeSlot(1, roleName, 0) end
function RoleInfo.AddRoleLevel(builder, roleLevel) builder:PrependInt32Slot(2, roleLevel, 0) end
function RoleInfo.AddServerId(builder, serverId) builder:PrependInt32Slot(3, serverId, 0) end
function RoleInfo.End(builder) return builder:EndObject() end

return RoleInfo -- return the module