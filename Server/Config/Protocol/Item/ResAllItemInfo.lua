-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Item

local flatbuffers = require('flatbuffers')

local ResAllItemInfo = {} -- the module
local ResAllItemInfo_mt = {} -- the class metatable

function ResAllItemInfo.New()
    local o = {}
    setmetatable(o, {__index = ResAllItemInfo_mt})
    return o
end
function ResAllItemInfo.GetRootAsResAllItemInfo(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = ResAllItemInfo.New()
    o:Init(buf, n + offset)
    return o
end
function ResAllItemInfo_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function ResAllItemInfo_mt:Result()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function ResAllItemInfo_mt:ItemInfoList(j)
    local o = self.view:Offset(6)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = require('Protocol.Item.ItemInfo').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function ResAllItemInfo_mt:ItemInfoListLength()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function ResAllItemInfo.Start(builder) builder:StartObject(2) end
function ResAllItemInfo.AddResult(builder, result) builder:PrependInt32Slot(0, result, 0) end
function ResAllItemInfo.AddItemInfoList(builder, itemInfoList) builder:PrependUOffsetTRelativeSlot(1, itemInfoList, 0) end
function ResAllItemInfo.StartItemInfoListVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function ResAllItemInfo.End(builder) return builder:EndObject() end

return ResAllItemInfo -- return the module